# name: Node App CI/CD (Self-Hosted)

# on:
#   push:
#     branches:
#       - master

# jobs:
#   build-deploy:
#     runs-on: self-hosted   # ✅ Runs on your laptop (where KIND + Docker Desktop exist)

#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       - name: Set up Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '18'

#       - name: Install Dependencies
#         run: npm install

#       - name: Run Tests
#         run: npm test || echo "No tests found"

#       - name: Log in to Docker Hub
#         run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

#       - name: Build & Push Docker Image
#         run: |
#           IMAGE=${{ secrets.DOCKER_HUB_USERNAME }}/node-demo:latest
#           docker build -t $IMAGE .
#           docker push $IMAGE

#       - name: Deploy to KIND
#         run: |
#           echo " Deploying to KIND..."
#           kubectl apply -f deployment.yml
#           kubectl rollout restart deployment/node-demo
#           kubectl rollout status deployment/node-demo


name: Node App CI/CD (Windows Self-Hosted)

on:
  push:
    branches:
      - master

jobs:
  build-deploy:
    runs-on: self-hosted

    steps:
      # 1️⃣ Checkout code
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2️⃣ Setup Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # 3️⃣ Install dependencies
      - name: Install Dependencies
        run: npm install

      # 4️⃣ Run tests (skip if none)
      - name: Run Tests
        run: |
          $pkg = Get-Content package.json | ConvertFrom-Json
          if ($pkg.scripts.PSObject.Properties.Name -contains "test") {
            npm test
          } else {
            Write-Host " No tests found, skipping..."
          }

      - name: Run ESLint
        run: |
          if (Test-Path .eslintrc.json) {
            npx eslint .
          } else {
            Write-Host "⚠️ No ESLint config found, skipping..."
          }

      - name: Docker login
        run: docker login -u $env:DOCKER_HUB_USERNAME -p $env:DOCKER_HUB_ACCESS_TOKEN
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}


      # 6️⃣ Build & push Docker image with Git SHA tag
      - name: Build & Push Docker Image
        run: |
          $sha = $env:GITHUB_SHA.Substring(0,7)  # short commit SHA
          $image_latest = "${{ secrets.DOCKER_HUB_USERNAME }}/node-demo:latest"
          $image_sha = "${{ secrets.DOCKER_HUB_USERNAME }}/node-demo:$sha"
          
          # Build images
          docker build -t $image_latest -t $image_sha .
          
          # Push both tags
          docker push $image_latest
          docker push $image_sha
        env:
          GITHUB_SHA: ${{ github.sha }}
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Install Trivy on Windows
        run: |
          Invoke-WebRequest -Uri "https://github.com/aquasecurity/trivy/releases/latest/download/trivy_0.54.1_windows-64bit.zip" -OutFile "trivy.zip"
          Expand-Archive trivy.zip -DestinationPath .
          Move-Item trivy.exe C:\Windows\System32\trivy.exe

      - name: Scan Docker Image with Trivy
        run: trivy image ${{ secrets.DOCKER_HUB_USERNAME }}/node-demo:latest

      # # 7️⃣ Cleanup old Docker images on the runner
      # - name: Cleanup old Docker images
      #   run: |
      #     docker image prune -af
      #     docker container prune -f

      # 8️⃣ Deploy to KIND
      - name: Deploy to KIND
        run: |
          Write-Host "Deploying node-demo to KIND..."
          # Update deployment to use latest SHA tag
          $sha = $env:GITHUB_SHA.Substring(0,7)
          kubectl set image deployment/node-demo node-demo=${{ secrets.DOCKER_HUB_USERNAME }}/node-demo:$sha
          
          # Rollout restart & status
          # kubectl rollout restart deployment/node-demo
          # kubectl rollout status deployment/node-demo
        env:
          GITHUB_SHA: ${{ github.sha }}


