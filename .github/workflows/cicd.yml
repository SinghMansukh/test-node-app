# name: Node App CI/CD (Self-Hosted)

# on:
#   push:
#     branches:
#       - master

# jobs:
#   build-deploy:
#     runs-on: self-hosted   # âœ… Runs on your laptop (where KIND + Docker Desktop exist)

#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3

#       - name: Set up Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '18'

#       - name: Install Dependencies
#         run: npm install

#       - name: Run Tests
#         run: npm test || echo "No tests found"

#       - name: Log in to Docker Hub
#         run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

#       - name: Build & Push Docker Image
#         run: |
#           IMAGE=${{ secrets.DOCKER_HUB_USERNAME }}/node-demo:latest
#           docker build -t $IMAGE .
#           docker push $IMAGE

#       - name: Deploy to KIND
#         run: |
#           echo "ðŸ“¦ Deploying to KIND..."
#           kubectl apply -f deployment.yml
#           kubectl rollout restart deployment/node-demo
#           kubectl rollout status deployment/node-demo


name: Node App CI/CD (Windows Self-Hosted)

on:
  push:
    branches:
      - master

jobs:
  build-deploy:
    runs-on: self-hosted   # âœ… runs on your Windows runner

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        # run: |
        #   if (Test-Path package.json) { npm test } else { echo "No tests found" }
        run: echo "No tests found, skipping..."

      - name: Log in to Docker Hub
        run: |
          username = ${{ secrets.DOCKER_HUB_USERNAME }}
          password = ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          docker login -u $username --password $password

      - name: Build & Push Docker Image
        run: |
          $env:IMAGE="${{ secrets.DOCKER_HUB_USERNAME }}/node-demo:latest"
          docker build -t $env:IMAGE .
          docker push $env:IMAGE

      - name: Deploy to KIND
        run: |
          Write-Host "ðŸ“¦ Deploying to KIND..."
          kubectl apply -f k8s/deployment.yaml
          kubectl rollout restart deployment/node-demo
          kubectl rollout status deployment/node-demo

