name: Node App CI/CD (Windows Self-Hosted)

on:
  push:
    branches:
      - master

jobs:
  build-deploy:
    runs-on: self-hosted

    # env: # üëà apply globally so all cache steps use Windows zip instead of tar/gzip
    #   ACTIONS_CACHE_USE_BACKUP_TOOL: true
    #   ACTIONS_CACHE_COMPRESSION_DISABLED: true


    steps:
      # 1Ô∏è‚É£ Checkout code
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # 3Ô∏è‚É£ Install dependencies
      - name: Install Dependencies
        run: npm install

      # 4Ô∏è‚É£ Run tests (skip if none)
      - name: Run Tests
        run: |
          $pkg = Get-Content package.json | ConvertFrom-Json
          if ($pkg.scripts.PSObject.Properties.Name -contains "test") {
            npm test
          } else {
            Write-Host "‚ö†Ô∏è No tests found, skipping..."
          }

      # 5Ô∏è‚É£ Lint
      - name: Run ESLint
        run: |
          if (Test-Path .eslintrc.json) {
            npx eslint .
          } else {
            Write-Host "‚ö†Ô∏è No ESLint config found, skipping..."
          }

      # 6Ô∏è‚É£ Docker login
      - name: Docker login
        run: docker login -u $env:DOCKER_HUB_USERNAME -p $env:DOCKER_HUB_ACCESS_TOKEN
        env:
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # 7Ô∏è‚É£ Build & push Docker image
      - name: Build & Push Docker Image
        run: |
          $sha = $env:GITHUB_SHA.Substring(0,7)
          $image_latest = "${{ secrets.DOCKER_HUB_USERNAME }}/node-demo:latest"
          $image_sha = "${{ secrets.DOCKER_HUB_USERNAME }}/node-demo:$sha"
          
          docker build -t $image_latest -t $image_sha .
          docker push $image_latest
          docker push $image_sha
        env:
          GITHUB_SHA: ${{ github.sha }}
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # 8Ô∏è‚É£ Cache Trivy binary
      - name: Cache Trivy binary
        uses: actions/cache@v3
        with:
          path: C:\trivy
          key: trivy-bin-v0.66.0
        env:
          ACTIONS_CACHE_USE_BACKUP_TOOL: true
          ACTIONS_CACHE_COMPRESSION_DISABLED: true

      - name: Install Trivy (if missing)
        shell: powershell
        run: |
          if (-Not (Test-Path "C:\trivy\trivy.exe")) {
            Invoke-WebRequest -Uri https://github.com/aquasecurity/trivy/releases/download/v0.66.0/trivy_0.66.0_windows-64bit.zip -OutFile trivy.zip
            Expand-Archive trivy.zip -DestinationPath C:\trivy
          }
          echo "C:\trivy" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      # 9Ô∏è‚É£ Cache Trivy DB
      - name: Cache Trivy DB
        uses: actions/cache@v3
        with:
          path: C:\Users\runneradmin\.cache\trivy
          key: trivy-db
          restore-keys: |
            trivy-db-

        env:
          ACTIONS_CACHE_USE_BACKUP_TOOL: true
          ACTIONS_CACHE_COMPRESSION_DISABLED: true

      # üîü Scan Docker image
      - name: Scan Docker Image with Trivy
        run: trivy image ${{ secrets.DOCKER_HUB_USERNAME }}/node-demo:latest

      # 1Ô∏è‚É£1Ô∏è‚É£ Deploy to KIND
      - name: Deploy to KIND
        run: |
          Write-Host "Deploying node-demo to KIND..."
          $sha = $env:GITHUB_SHA.Substring(0,7)
          kubectl set image deployment/node-demo node-demo=${{ secrets.DOCKER_HUB_USERNAME }}/node-demo:$sha
          kubectl rollout restart deployment node-demo
        env:
          GITHUB_SHA: ${{ github.sha }}
